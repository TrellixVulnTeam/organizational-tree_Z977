import { __decorate, __read, __spread } from "tslib";
import { Component, ElementRef, AfterViewInit, Input, Output, OnChanges, SimpleChanges, EventEmitter } from '@angular/core';
import { D3OrgChart } from '../../clasess/d3-org-chart.class';
var BEOrgchartComponent = /** @class */ (function () {
    //#endregion
    function BEOrgchartComponent(prEl) {
        this.prEl = prEl;
        this.onNodeClick = new EventEmitter();
    }
    Object.defineProperty(BEOrgchartComponent.prototype, "chart", {
        get: function () {
            var me = this;
            if (!me._chart) {
                var options = {};
                // adding nodes if defined
                if (me.nodes)
                    options.data = me.nodes;
                // adding node parser if defined
                if (me.nodeParser)
                    options.nodeParser = me.nodeParser;
                me._chart = new D3OrgChart(this.prEl.nativeElement, options);
            }
            ;
            return me._chart;
        },
        enumerable: true,
        configurable: true
    });
    BEOrgchartComponent.prototype.ngAfterViewInit = function () {
        this.init();
    };
    BEOrgchartComponent.prototype.ngOnChanges = function (changes) {
        var me = this;
        // detecting changes of input
        if (changes.nodeParser && changes.nodeParser.currentValue) {
            me.assignNodeParser(changes.nodeParser.currentValue);
            me.chart.render();
        }
        if (changes.nodes && changes.nodes.currentValue) {
            me.assignData(changes.nodes.currentValue);
            me.chart.render();
        }
    };
    BEOrgchartComponent.prototype.init = function () {
        var me = this;
        // init the canvas
        var chart = me.chart; // Must be like this to ensure chart init
        setTimeout(function () { return me.chart.render(); }, 200);
        // setting data
        me.chart.onNodeClick.subscribe(function (data) {
            me.onNodeClick.next(data.node);
        });
    };
    BEOrgchartComponent.prototype.assignData = function (data, clear) {
        if (clear === void 0) { clear = true; }
        var me = this;
        var chart = me.chart; // Must be like this to ensure chart init
        // if isnÂ´t array we convert it in array
        if (!(data instanceof Array))
            data = [data];
        if (clear) {
            chart.data = data;
            return;
        }
        // pushing data
        chart.data = __spread(chart.data, data);
        chart.render();
    };
    BEOrgchartComponent.prototype.assignNodeParser = function (prParser) {
        var me = this;
        var chart = me.chart; // Must be like this to ensure chart init
        chart.nodeParser = prParser;
        chart.render();
    };
    BEOrgchartComponent.prototype.assignOptions = function (prOptions) {
        var me = this;
        me.chart.setOptions(prOptions);
    };
    BEOrgchartComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], BEOrgchartComponent.prototype, "nodes", void 0);
    __decorate([
        Input()
    ], BEOrgchartComponent.prototype, "nodeParser", void 0);
    __decorate([
        Input()
    ], BEOrgchartComponent.prototype, "options", void 0);
    __decorate([
        Output()
    ], BEOrgchartComponent.prototype, "onNodeClick", void 0);
    BEOrgchartComponent = __decorate([
        Component({
            selector: 'be-orgchart',
            template: "<div #orgchart class=\"container\"></div>",
            styles: [":host{display:flex;flex-direction:column;overflow:hidden}"]
        })
    ], BEOrgchartComponent);
    return BEOrgchartComponent;
}());
export { BEOrgchartComponent };
//# sourceMappingURL=data:application/json;base64,