// getting base64 icons
import { errorBase64Data } from './../../../assets/icons/error.base64';
var D3NodeBasicParser = /** @class */ (function () {
    function D3NodeBasicParser() {
        // dimensions
        this.width = 240;
        this.height = 100;
        this.frame = {
            type: 'rect',
            className: 'node-rect',
            width: this.width,
            height: this.height,
            stroke: 'blue',
            "stroke-width": 2,
            fill: '#02B2AC',
            rx: 5
        };
        this.defaultImage = {
            type: 'link',
            data: "https://raw.githubusercontent.com/hdcolelia/be-orgchart/master/src/lib/assets/images/root.png"
        };
        // error icon
        this.errorBase64Icon = errorBase64Data;
        this.imageDefs = {
            x: -20, y: -15, h: 60, w: 60, rx: 60
        };
        this.transitionDuration = 600;
    }
    D3NodeBasicParser.prototype.drawNodes = function (prGroup, prClickEvent) {
        var me = this;
        // adding rect
        me.addRect(prGroup, me.frame);
        //.on('click', (node) => {
        //  prClickEvent.next({ id: node.data.nodeId, node: node.data });
        //})
        // adding title
        me.addText(prGroup, { type: 'text', className: 'title', refField: 'title', x: 50, y: 25, "font-size": 15 });
        me.addText(prGroup, { type: 'text', className: 'description', refField: 'description', x: 50, y: 45, "font-size": 10 });
        me.addText(prGroup, { type: 'text', className: 'description', refField: 'nodeId', x: 50, y: 70, "font-size": 8 });
        // adding image
        var imageUrl = function (d) {
            if (d.data.nodeImage)
                return "url(#img-" + d.data.nodeId + ")";
            if (me.defaultImage)
                return "url(#img-default-node-img)";
            return '';
        };
        prGroup.filter(function (d) { return imageUrl(d) != ''; })
            .append('rect').attr('class', 'node-image')
            .attr('x', me.imageDefs.x).attr('y', me.imageDefs.y)
            .attr('width', me.imageDefs.w).attr('height', me.imageDefs.h)
            .attr('fill', function (d) { return imageUrl(d); }).attr('rx', me.imageDefs.rx);
        // .on('click', (node) => {
        //   prClickEvent.next({ id: node.data.nodeId, node: node.data });
        // });
        // adding click receptor
        prGroup.on('click', function (node) {
            prClickEvent.next({ id: node.data.nodeId, node: node.data });
        });
    };
    //#region adding components
    D3NodeBasicParser.prototype.addRect = function (gNode, rect) {
        return this.addComponent(gNode, rect);
    };
    D3NodeBasicParser.prototype.addText = function (gNode, text) {
        return this.addComponent(gNode, text);
    };
    D3NodeBasicParser.prototype.addComponent = function (gNode, component) {
        var el = gNode.append(component.type);
        el.attr('class', component.className);
        var _loop_1 = function (key) {
            switch (key) {
                case 'refField':
                    el.text(function (d) { return d.data[component[key]]; });
                default:
                    el.attr(key, component[key]);
            }
        };
        for (var key in component) {
            _loop_1(key);
        }
        return el;
    };
    return D3NodeBasicParser;
}());
export { D3NodeBasicParser };
//# sourceMappingURL=data:application/json;base64,