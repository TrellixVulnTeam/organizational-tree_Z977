import * as d3 from 'd3';
import { Subject, fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { D3NodeBasicParser } from './@items';
import { calcGFit, setPattern, addDefaultDefs, buildTree } from './d3x/d3x';
var D3OrgChart = /** @class */ (function () {
    function D3OrgChart(prContainer, prOptions) {
        var _this = this;
        var _a, _b;
        //#region Default Options
        this.options = {
            backgroundColor: '#03A3C5',
            nodeParser: new D3NodeBasicParser(),
            data: [],
            defaultFont: 'Tahoma',
            nodeHorizontalSpaceScale: 0.5,
            nodeVerticalSpaceScale: 0.8
        };
        // protected allNodes: any;
        this._data = [];
        //#endregion
        this.zoomFunc = d3.zoom().scaleExtent([0.1, 20]).on("zoom", function (d) { return _this.zoomed(); });
        this.currentZoom = 1;
        //#region Events
        // node click
        this.onNodeClick = new Subject();
        var me = this;
        // init container
        me.container = d3.select(prContainer);
        //If Data argument passed - then set it
        if ((_a = prOptions) === null || _a === void 0 ? void 0 : _a.data)
            me._data = prOptions.data;
        // setting parser
        me._nodeParser = ((_b = prOptions) === null || _b === void 0 ? void 0 : _b.nodeParser) || me.options.nodeParser;
        // applying options
        me.options = Object.assign(me.options, prOptions);
        // monitor resize
        fromEvent(prContainer, 'resize')
            .pipe(debounceTime(300)).subscribe(function () {
            // HDC - VER this.prepareCanvas();
            console.log('resize container');
            _this.render();
        });
        fromEvent(window, 'resize')
            .pipe(debounceTime(300)).subscribe(function () {
            // HDC - VER this.prepareCanvas();
            console.log('resize window');
            _this.render();
        });
    }
    Object.defineProperty(D3OrgChart.prototype, "nodeParser", {
        get: function () {
            if (!this._nodeParser)
                this._nodeParser = new D3NodeBasicParser();
            return this._nodeParser;
        },
        set: function (parser) {
            this._nodeParser = parser;
            // this.render();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(D3OrgChart.prototype, "data", {
        get: function () {
            return this._data || [];
        },
        set: function (data) {
            this._data = data;
            // this.render()
        },
        enumerable: true,
        configurable: true
    });
    D3OrgChart.prototype.render = function () {
        var me = this;
        // preparing svg
        me.prepareCanvas();
        // if no data then return
        if (!me.data.length)
            return;
        // preparing data
        me.prepareData();
        // showing nodes
        me.showNodes();
        return this;
    };
    // preparing canvas
    D3OrgChart.prototype.prepareCanvas = function () {
        var _this = this;
        var me = this;
        //Drawing containers
        var containerRect = me.container.node().getBoundingClientRect();
        // console.log('Container resct: ', containerRect)
        me.svg = me.container.selectAll('svg')
            .data([{ id: 'svg' }], function (d) { return d.id; })
            .join(function (enter) {
            return enter
                .append('svg')
                .attr('class', 'svg-chart-container')
                .attr('font-family', me.options.defaultFont)
                // .call(d3.zoom().on("zoom", d => this.zoomed()))
                .call(_this.zoomFunc)
                .on("dblclick.zoom", null)
                .attr('cursor', 'move')
                .style('background-color', me.options.backgroundColor);
        }, function (update) {
            return update
                .attr('width', containerRect.width)
                .attr('height', containerRect.height)
                .attr('font-family', me.options.defaultFont)
                .style('background-color', me.options.backgroundColor);
        })
            .attr('width', containerRect.width)
            .attr('height', containerRect.height)
            .attr('font-family', me.options.defaultFont)
            .style('background-color', me.options.backgroundColor);
        //Add container g element
        me.chart = me.svg.selectAll('g.chart')
            .data([{ id: 'chart' }], function (d) { return d.id; })
            .join(function (enter) { return enter
            .append('g')
            .attr('class', 'chart')
            .attr('transform', "translate(0,0)"); }, function (update) { return update; });
        if (!me.lastTransform)
            me.svg.transition().duration(200).call(me.zoomFunc.transform, d3.zoomIdentity.translate(containerRect.width / 2, this.nodeParser.height).scale(1));
        //Add container g element
        me.tb = me.svg.selectAll('g.toolbar')
            .data([{ id: 'toolbar' }], function (d) { return d.id; })
            .join(function (enter) { return enter
            .append('g')
            .attr('class', 'toolbar')
            .attr('transform', "translate(10,10)")
            .append('rect')
            .attr('width', 30)
            .attr('height', 30)
            .attr('fill', 'url(#img-fit-icon)')
            .attr('cursor', 'pointer')
            .on('click', function () { return me.fit(); }); }, function (update) { return update; });
        me.prepareDefs();
    };
    // preparing defs
    D3OrgChart.prototype.prepareDefs = function () {
        var me = this;
        // defs
        me.defs = me.svg.selectAll('defs.globalDefs')
            .data([{ id: 'defs' }], function (d) { return d.id; })
            .join(function (enter) {
            var defs = enter.append('defs').attr('class', 'globalDefs');
            addDefaultDefs(defs, {
                'expand-icon': {
                    type: 'icon',
                    backgroundColor: '#05C356',
                    scale: 0.6,
                    color: '#EAFA48',
                    name: 'faPlus'
                },
                'collapse-icon': {
                    type: 'icon',
                    backgroundColor: '#D10303',
                    scale: 0.6,
                    color: '#EAFA48',
                    name: 'faMinus'
                },
                'fit-icon': {
                    type: 'icon',
                    backgroundColor: '#074EF3',
                    scale: 0.9,
                    color: '#EAFA48',
                    name: 'faExpand'
                },
                'default-node-img': me.nodeParser.defaultImage
            }, me.nodeParser);
            //addDefs(defs, me.defsElements);
            return defs;
        }, function (update) { return update; });
    };
    // preparing data
    D3OrgChart.prototype.prepareData = function () {
        var me = this;
        // if no data return 
        if (!me.data.length)
            return;
        // Convert flat data to hierarchical
        if (!me.root) {
            try { // preventing multiple root
                me.root = d3.stratify().id(function (_a) {
                    var nodeId = _a.nodeId;
                    return nodeId;
                }).parentId(function (_a) {
                    var parentNodeId = _a.parentNodeId;
                    return parentNodeId;
                })(me.data);
            }
            catch (err) {
                me.root = d3.stratify().id(function (_a) {
                    var nodeId = _a.nodeId;
                    return nodeId;
                }).parentId(function (_a) {
                    var parentNodeId = _a.parentNodeId;
                    return parentNodeId;
                })([{
                        nodeId: 'root',
                        parentNodeId: '',
                        title: 'Error',
                        description: err.message || err,
                        nodeImage: {
                            type: 'base64',
                            data: me.nodeParser.errorBase64Icon
                        }
                    }]);
            }
        }
        // preparing treemap
        var containerRect = me.container.node().getBoundingClientRect();
        me.treemap = d3.tree() //.size([containerRect.width || 250, containerRect.height])
            .nodeSize([
            (me.nodeParser.width + (this.nodeParser.width * me.options.nodeHorizontalSpaceScale || 0.5)) * 0,
            (me.nodeParser.height + (this.nodeParser.height * me.options.nodeVerticalSpaceScale || 0.8)) * 0
        ])
            .separation(function (a, b) {
            return 1;
        });
        // me.allNodes = me.treemap(me.root).descendants();
        me.checkExpanded(me.root);
    };
    // showing nodes
    D3OrgChart.prototype.showNodes = function (prNode) {
        var _this = this;
        if (prNode === void 0) { prNode = null; }
        var me = this;
        if (!prNode)
            prNode = me.root;
        var nodeRef = {
            x: prNode.x || 0,
            y: prNode.y || 0,
            parent: prNode.parent
        };
        // console.log('Node Before: ', nodeRef.x);
        var updatePosition = {
            x: prNode.x || 0,
            y: prNode.y || 0
        };
        //  Assigns the x and y position for the nodes
        var treeData = me.treemap(me.root);
        // it is necesary for scope 
        var drawNodes = function (container) { return me.nodeParser.drawNodes(container, me.onNodeClick); };
        var drawCollapser = function (nodeGroup) {
            nodeGroup.append('circle')
                .attr('class', 'collapser')
                .attr('cx', me.nodeParser.width / 2)
                .attr('cy', me.nodeParser.height)
                .attr('r', 15)
                .attr('stroke', 'black')
                .attr('stroke-width', 2)
                .on('click', function (node) {
                // console.log('Node X: ', node.x)
                d3.event.preventDefault();
                me.expand(node, true);
            });
        };
        // console.log('Node ref: ', prNode.x, nodeRef.x, nodeRef )
        var nodes = treeData.descendants();
        // probanding
        buildTree(me.root, {
            w: me.nodeParser.width + (this.nodeParser.width * me.options.nodeHorizontalSpaceScale || 0.5),
            h: me.nodeParser.height + (this.nodeParser.height * me.options.nodeVerticalSpaceScale || 0.8)
        });
        // console.log('Nodes: ', nodes);
        // preparing all definitions for nodes
        me.defs.selectAll('pattern.node')
            .data(nodes, function (d) { return d.data.nodeId; })
            .join(function (enter) {
            return enter.filter(function (d) { return d.data.nodeImage != null; })
                .append('pattern').attr('class', 'node')
                .each(function (nodeData, i, enterNodes) {
                // adding pattern
                var pattern = d3.select(enterNodes[i]);
                setPattern(pattern, nodeData.data, me.nodeParser);
            });
        }, function (update) { return update; }, function (exit) { return exit
            .transition()
            .duration(me.nodeParser.transitionDuration)
            .style("opacity", 0)
            .remove(); });
        // rendering nodes
        var nodeStartPosition = function (d) {
            if (nodeRef) {
                return "translate(" + (nodeRef.x - (me.nodeParser.width / 2)) + "," + nodeRef.y + ")";
            }
            if (!d.parent)
                return "translate(" + (d.x - (me.nodeParser.width / 2)) + "," + d.y + ")";
            return "translate(" + (d.parent.x - (me.nodeParser.width / 2)) + "," + d.parent.y + ")";
        };
        var collapserStartPosition = function (d) {
            if (nodeRef)
                return nodeRef;
            if (!d.parent)
                return d;
            return d.parent;
        };
        var nodePosition = function (params) {
            return "translate(" + (params.x - (me.nodeParser.width / 2)) + "," + params.y + ")";
        };
        var collapserPosition = function (params) {
            return "translate(" + params.x + "," + params.y + ")";
        };
        var expandIconVisible = function (d) { return (d.children || d._children) ? 'visible' : 'hidden'; };
        var expandIcon = function (d) { return expandIconVisible(d) == 'visible' ? (d.data.expanded ? "url(#img-collapse-icon)" : "url(#img-expand-icon)") : ''; };
        var collapserCursor = function (d) { return expandIconVisible(d) == 'visible' ? (d.data.expanded ? "zoom-out" : "zoom-in") : 'default'; };
        me.chart.selectAll('g.node')
            .data(nodes, function (d) { return d.data.nodeId; })
            .join(function (enter) {
            return enter.append('g')
                .style("opacity", 0)
                .attr('class', 'node')
                .attr('cursor', 'pointer')
                .attr('transform', nodeStartPosition)
                .call(drawNodes)
                // .call(drawCollapser)
                .on('dblclick', function (node) {
                var containerRect = me.container.node().getBoundingClientRect();
                me.traslateTo((containerRect.width / 2) - node.x, ((containerRect.height - me.nodeParser.height) / 2) - node.y);
            });
        }, function (update) { return update; }, function (exit) {
            return exit
                .transition()
                .duration(me.nodeParser.transitionDuration)
                .attr('transform', nodePosition(prNode))
                .style("opacity", 0)
                .remove();
        })
            .transition().duration(me.nodeParser.transitionDuration)
            .style("opacity", 1)
            .attr('transform', nodePosition);
        //.selectAll('circle.collapser')
        //.attr('visibility', expandIconVisible)
        //.attr('fill', expandIcon)
        me.chart.selectAll('circle.collapser')
            .data(nodes, function (d) { return d.data.nodeId; })
            .join(function (enter) {
            return enter.append('circle')
                .attr('class', 'collapser')
                .style("opacity", 0)
                .attr('cx', function (d) { return collapserStartPosition(d).x; })
                .attr('cy', function (d) { return collapserStartPosition(d).y + me.nodeParser.height; })
                .attr('r', 15)
                .attr('stroke', 'black')
                .attr('stroke-width', 2)
                .on('click', function (node) {
                // console.log('Node X: ', node.x)
                d3.event.preventDefault();
                me.expand(node, true);
            });
        }, function (update) { return update; }, function (exit) {
            return exit
                .transition().duration(me.nodeParser.transitionDuration)
                .attr('cx', function (d) { return collapserStartPosition(d).x; })
                .attr('cy', function (d) { return collapserStartPosition(d).y + me.nodeParser.height; })
                .style("opacity", 0)
                .remove();
        })
            .transition().duration(me.nodeParser.transitionDuration)
            .style("opacity", 1)
            .attr('cx', function (d) { return d.x; })
            .attr('cy', function (d) { return d.y + me.nodeParser.height; })
            .attr('visibility', expandIconVisible)
            .attr('fill', expandIcon)
            .attr('cursor', collapserCursor);
        // rendering links
        var pathStartingDiagonal = function (d) {
            return _this.linkPath(d, d);
        };
        var pathDiagonal = function (d) {
            var target = { x: d.parent.x, y: d.parent.y + me.nodeParser.height };
            return _this.linkPath(d, d.parent);
        };
        me.chart.selectAll('path.link')
            .data(nodes.slice(1), function (d) { return d.data.nodeId; })
            .join(function (enter) {
            return enter
                .insert('path', 'g')
                .attr('class', 'link')
                .attr('fill', 'none')
                .attr('stroke', 'blue')
                .attr('stroke-width', 2)
                .attr('d', pathStartingDiagonal(nodeRef));
        }, function (update) { return update; }, function (exit) {
            return exit
                .transition().duration(me.nodeParser.transitionDuration)
                .attr('d', pathStartingDiagonal(prNode))
                .remove();
        })
            .transition().duration(me.nodeParser.transitionDuration)
            .attr('d', pathDiagonal);
    };
    // Zoom handler function
    D3OrgChart.prototype.zoomed = function () {
        var me = this;
        // Saving d3 event's transform object
        me.lastTransform = d3.event.transform;
        // Reposition and rescale chart accordingly
        if (isNaN(me.lastTransform.k) || isNaN(me.lastTransform.x) || isNaN(me.lastTransform.y))
            return;
        me.chart.attr('transform', d3.event.transform);
    };
    D3OrgChart.prototype._onNodeClick = function (nodeId, node) {
        this.onNodeClick.next({ id: nodeId, node: node });
    };
    //#endregion
    // Generate custom diagonal - play with it here - https://observablehq.com/@bumbeishvili/curved-edges?collection=@bumbeishvili/work-components
    D3OrgChart.prototype.linkPath = function (source, target) {
        var me = this;
        // Calculate some variables based on source and target (s,t) coordinates
        var x = source.x;
        var y = source.y;
        var ex = target.x;
        var ey = target.y + me.nodeParser.height;
        var linkHeight = 25;
        var curveRadius = Math.abs(x - ex) != 0 ? 15 : 0;
        var xrvs = ex - x < 0 ? -1 : 1;
        var yrvs = ey - y < 0 ? -1 : 1;
        var w = Math.abs(ex - x) - (curveRadius * 2);
        var path = "\n      M " + x + " " + y + "\n      L " + x + " " + (y + (linkHeight * yrvs)) + "\n      C " + x + " " + (y + ((linkHeight + curveRadius) * yrvs)) + " " + x + " " + (y + ((linkHeight + curveRadius) * yrvs)) + " " + (x + (curveRadius * xrvs)) + " " + (y + ((linkHeight + curveRadius) * yrvs)) + "\n      L " + (x + ((w + curveRadius) * xrvs)) + " " + (y + ((linkHeight + curveRadius) * yrvs)) + "\n      C " + ex + "  " + (y + ((linkHeight + curveRadius) * yrvs)) + " " + ex + "  " + (y + ((linkHeight + curveRadius) * yrvs)) + " " + ex + " " + (y + ((linkHeight + curveRadius) * yrvs) + (curveRadius * yrvs)) + "\n      L " + ex + " " + ey + "\n    ";
        return path;
    };
    D3OrgChart.prototype.checkExpanded = function (node) {
        var me = this;
        // checking expanded
        if (node.data.expanded) {
            if (!node.children && node._children) {
                node.children = node._children;
                node._children = null;
            }
        }
        else { // collapsed
            if (node.children) {
                node._children = node.children;
                node.children = null;
            }
        }
        // checking children
        (node.children || node._children || []).forEach(function (current) { return me.checkExpanded(current); });
    };
    D3OrgChart.prototype.expand = function (node, toggle) {
        if (toggle === void 0) { toggle = false; }
        var me = this;
        var nodeRef = Object.assign(node);
        // if toggle - lets toggle
        if (toggle)
            node.data.expanded = !node.data.expanded;
        // checking expanded
        if (node.data.expanded) {
            if (!node.children && node._children) {
                node.children = node._children;
                node._children = null;
            }
        }
        else { // collapsed
            if (node.children) {
                node._children = node.children;
                node.children = null;
            }
        }
        // expand(node.children, node.data.expanded);
        // console.log('Before expand: ', nodeRef.x,  node.x)
        if (toggle)
            me.showNodes(node);
    };
    D3OrgChart.prototype.traslateTo = function (prX, prY) {
        var me = this;
        me.svg
            .transition().duration(me.nodeParser.transitionDuration)
            .call(me.zoomFunc.transform, d3.zoomIdentity.translate(prX, prY));
    };
    D3OrgChart.prototype.fit = function () {
        var me = this;
        // const zoom = d3.zoom().on("zoom", d => this.zoomed())
        if (!me.root)
            return;
        var fit = calcGFit(me.chart, me.svg, me.root, me.nodeParser);
        me.svg.transition().duration(me.nodeParser.transitionDuration).call(me.zoomFunc.transform, d3.zoomIdentity.translate(fit.x, fit.y).scale(fit.scale));
    };
    D3OrgChart.prototype.setOptions = function (prOptions) {
        var me = this;
        me.options = Object.assign(me.options, prOptions);
    };
    return D3OrgChart;
}());
export { D3OrgChart };
//# sourceMappingURL=data:application/json;base64,