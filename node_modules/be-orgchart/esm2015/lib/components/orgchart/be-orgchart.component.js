import { __decorate } from "tslib";
import { Component, ElementRef, AfterViewInit, Input, Output, OnChanges, SimpleChanges, EventEmitter } from '@angular/core';
import { D3OrgChart } from '../../clasess/d3-org-chart.class';
let BEOrgchartComponent = class BEOrgchartComponent {
    //#endregion
    constructor(prEl) {
        this.prEl = prEl;
        this.onNodeClick = new EventEmitter();
    }
    get chart() {
        const me = this;
        if (!me._chart) {
            const options = {};
            // adding nodes if defined
            if (me.nodes)
                options.data = me.nodes;
            // adding node parser if defined
            if (me.nodeParser)
                options.nodeParser = me.nodeParser;
            me._chart = new D3OrgChart(this.prEl.nativeElement, options);
        }
        ;
        return me._chart;
    }
    ngAfterViewInit() {
        this.init();
    }
    ngOnChanges(changes) {
        const me = this;
        // detecting changes of input
        if (changes.nodeParser && changes.nodeParser.currentValue) {
            me.assignNodeParser(changes.nodeParser.currentValue);
            me.chart.render();
        }
        if (changes.nodes && changes.nodes.currentValue) {
            me.assignData(changes.nodes.currentValue);
            me.chart.render();
        }
    }
    init() {
        const me = this;
        // init the canvas
        const chart = me.chart; // Must be like this to ensure chart init
        setTimeout(() => me.chart.render(), 200);
        // setting data
        me.chart.onNodeClick.subscribe((data) => {
            me.onNodeClick.next(data.node);
        });
    }
    assignData(data, clear = true) {
        const me = this;
        const chart = me.chart; // Must be like this to ensure chart init
        // if isnÂ´t array we convert it in array
        if (!(data instanceof Array))
            data = [data];
        if (clear) {
            chart.data = data;
            return;
        }
        // pushing data
        chart.data = [...chart.data, ...data];
        chart.render();
    }
    assignNodeParser(prParser) {
        const me = this;
        const chart = me.chart; // Must be like this to ensure chart init
        chart.nodeParser = prParser;
        chart.render();
    }
    assignOptions(prOptions) {
        const me = this;
        me.chart.setOptions(prOptions);
    }
};
BEOrgchartComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input()
], BEOrgchartComponent.prototype, "nodes", void 0);
__decorate([
    Input()
], BEOrgchartComponent.prototype, "nodeParser", void 0);
__decorate([
    Input()
], BEOrgchartComponent.prototype, "options", void 0);
__decorate([
    Output()
], BEOrgchartComponent.prototype, "onNodeClick", void 0);
BEOrgchartComponent = __decorate([
    Component({
        selector: 'be-orgchart',
        template: "<div #orgchart class=\"container\"></div>",
        styles: [":host{display:flex;flex-direction:column;overflow:hidden}"]
    })
], BEOrgchartComponent);
export { BEOrgchartComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmUtb3JnY2hhcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYmUtb3JnY2hhcnQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9vcmdjaGFydC9iZS1vcmdjaGFydC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVILE9BQU8sRUFBRSxVQUFVLEVBQXNCLE1BQU0sa0NBQWtDLENBQUM7QUFTbEYsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFxQjVCLFlBQVk7SUFFWixZQUFzQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBbkI1QixnQkFBVyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBbUJ4QixDQUFDO0lBZjNDLElBQUksS0FBSztRQUNMLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRTtZQUNaLE1BQU0sT0FBTyxHQUF1QixFQUFFLENBQUM7WUFDdkMsMEJBQTBCO1lBQzFCLElBQUksRUFBRSxDQUFDLEtBQUs7Z0JBQUUsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ3RDLGdDQUFnQztZQUNoQyxJQUFJLEVBQUUsQ0FBQyxVQUFVO2dCQUFFLE9BQU8sQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUV0RCxFQUFFLENBQUMsTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2hFO1FBQUEsQ0FBQztRQUNGLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBS0QsZUFBZTtR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LCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0LCBJbnB1dCwgT3V0cHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEM09yZ0NoYXJ0LCBJRDNPcmdDaGFydE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jbGFzZXNzL2QzLW9yZy1jaGFydC5jbGFzcyc7XHJcbmltcG9ydCB7IElEM05vZGUgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgRDNOb2RlQmFzaWNQYXJzZXIgfSBmcm9tICcuLi8uLi9jbGFzZXNzL0BpdGVtcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYmUtb3JnY2hhcnQnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2JlLW9yZ2NoYXJ0LmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2JlLW9yZ2NoYXJ0LmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEJFT3JnY2hhcnRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xyXG4gICAgQElucHV0KCkgbm9kZXM6IElEM05vZGVbXTtcclxuICAgIEBJbnB1dCgpIG5vZGVQYXJzZXI6IEQzTm9kZUJhc2ljUGFyc2VyO1xyXG4gICAgQElucHV0KCkgb3B0aW9uczogSUQzT3JnQ2hhcnRPcHRpb25zO1xyXG4gICAgQE91dHB1dCgpIG9uTm9kZUNsaWNrOiBFdmVudEVtaXR0ZXI8SUQzTm9kZT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgLy8jcmVnaW9uIENoYXJ0XHJcbiAgICBwcm90ZWN0ZWQgX2NoYXJ0OiBEM09yZ0NoYXJ0O1xyXG4gICAgZ2V0IGNoYXJ0KCk6IEQzT3JnQ2hhcnQge1xyXG4gICAgICAgIGNvbnN0IG1lID0gdGhpcztcclxuICAgICAgICBpZiAoIW1lLl9jaGFydCkge1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb25zOiBJRDNPcmdDaGFydE9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgLy8gYWRkaW5nIG5vZGVzIGlmIGRlZmluZWRcclxuICAgICAgICAgICAgaWYgKG1lLm5vZGVzKSBvcHRpb25zLmRhdGEgPSBtZS5ub2RlcztcclxuICAgICAgICAgICAgLy8gYWRkaW5nIG5vZGUgcGFyc2VyIGlmIGRlZmluZWRcclxuICAgICAgICAgICAgaWYgKG1lLm5vZGVQYXJzZXIpIG9wdGlvbnMubm9kZVBhcnNlciA9IG1lLm5vZGVQYXJzZXI7XHJcblxyXG4gICAgICAgICAgICBtZS5fY2hhcnQgPSBuZXcgRDNPcmdDaGFydCh0aGlzLnByRWwubmF0aXZlRWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gbWUuX2NoYXJ0O1xyXG4gICAgfVxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIHByRWw6IEVsZW1lbnRSZWYpIHsgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLmluaXQoKVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICBjb25zdCBtZSA9IHRoaXM7XHJcblxyXG4gICAgICAgIC8vIGRldGVjdGluZyBjaGFuZ2VzIG9mIGlucHV0XHJcbiAgICAgICAgaWYgKGNoYW5nZXMubm9kZVBhcnNlciAmJiBjaGFuZ2VzLm5vZGVQYXJzZXIuY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgIG1lLmFzc2lnbk5vZGVQYXJzZXIoY2hhbmdlcy5ub2RlUGFyc2VyLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgIG1lLmNoYXJ0LnJlbmRlcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMubm9kZXMgJiYgY2hhbmdlcy5ub2Rlcy5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgbWUuYXNzaWduRGF0YShjaGFuZ2VzLm5vZGVzLmN1cnJlbnRWYWx1ZSBhcyBJRDNOb2RlW10pO1xyXG4gICAgICAgICAgICBtZS5jaGFydC5yZW5kZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xyXG4gICAgICAgIC8vIGluaXQgdGhlIGNhbnZhc1xyXG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gbWUuY2hhcnQ7IC8vIE11c3QgYmUgbGlrZSB0aGlzIHRvIGVuc3VyZSBjaGFydCBpbml0XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBtZS5jaGFydC5yZW5kZXIoKSwgMjAwKTtcclxuICAgICAgICAvLyBzZXR0aW5nIGRhdGFcclxuICAgICAgICBtZS5jaGFydC5vbk5vZGVDbGljay5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgIChkYXRhOiB7IGlkOiBzdHJpbmcsIG5vZGU6IElEM05vZGUgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbWUub25Ob2RlQ2xpY2submV4dChkYXRhLm5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIGFzc2lnbkRhdGEoZGF0YTogSUQzTm9kZVtdIHwgSUQzTm9kZSwgY2xlYXI6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gbWUuY2hhcnQ7IC8vIE11c3QgYmUgbGlrZSB0aGlzIHRvIGVuc3VyZSBjaGFydCBpbml0XHJcbiAgICAgICAgLy8gaWYgaXNuwrR0IGFycmF5IHdlIGNvbnZlcnQgaXQgaW4gYXJyYXlcclxuICAgICAgICBpZiAoIShkYXRhIGluc3RhbmNlb2YgQXJyYXkpKSBkYXRhID0gW2RhdGFdO1xyXG4gICAgICAgIGlmIChjbGVhcikge1xyXG4gICAgICAgICAgICBjaGFydC5kYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwdXNoaW5nIGRhdGFcclxuICAgICAgICBjaGFydC5kYXRhID0gWy4uLmNoYXJ0LmRhdGEsIC4uLmRhdGFdO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzc2lnbk5vZGVQYXJzZXIocHJQYXJzZXI6IEQzTm9kZUJhc2ljUGFyc2VyKSB7XHJcbiAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gbWUuY2hhcnQ7IC8vIE11c3QgYmUgbGlrZSB0aGlzIHRvIGVuc3VyZSBjaGFydCBpbml0XHJcbiAgICAgICAgY2hhcnQubm9kZVBhcnNlciA9IHByUGFyc2VyO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzc2lnbk9wdGlvbnMocHJPcHRpb25zOiBQYXJ0aWFsPElEM09yZ0NoYXJ0T3B0aW9ucz4pIHtcclxuICAgICAgICBjb25zdCBtZSA9IHRoaXM7XHJcbiAgICAgICAgbWUuY2hhcnQuc2V0T3B0aW9ucyhwck9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuIl19