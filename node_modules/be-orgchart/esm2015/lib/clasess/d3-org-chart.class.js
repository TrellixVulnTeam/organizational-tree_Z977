import * as d3 from 'd3';
import { Subject, fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { D3NodeBasicParser } from './@items';
import { calcGFit, setPattern, addDefaultDefs, buildTree } from './d3x/d3x';
export class D3OrgChart {
    constructor(prContainer, prOptions) {
        var _a, _b;
        //#region Default Options
        this.options = {
            backgroundColor: '#03A3C5',
            nodeParser: new D3NodeBasicParser(),
            data: [],
            defaultFont: 'Tahoma',
            nodeHorizontalSpaceScale: 0.5,
            nodeVerticalSpaceScale: 0.8
        };
        // protected allNodes: any;
        this._data = [];
        //#endregion
        this.zoomFunc = d3.zoom().scaleExtent([0.1, 20]).on("zoom", d => this.zoomed());
        this.currentZoom = 1;
        //#region Events
        // node click
        this.onNodeClick = new Subject();
        const me = this;
        // init container
        me.container = d3.select(prContainer);
        //If Data argument passed - then set it
        if ((_a = prOptions) === null || _a === void 0 ? void 0 : _a.data)
            me._data = prOptions.data;
        // setting parser
        me._nodeParser = ((_b = prOptions) === null || _b === void 0 ? void 0 : _b.nodeParser) || me.options.nodeParser;
        // applying options
        me.options = Object.assign(me.options, prOptions);
        // monitor resize
        fromEvent(prContainer, 'resize')
            .pipe(debounceTime(300)).subscribe(() => {
            // HDC - VER this.prepareCanvas();
            console.log('resize container');
            this.render();
        });
        fromEvent(window, 'resize')
            .pipe(debounceTime(300)).subscribe(() => {
            // HDC - VER this.prepareCanvas();
            console.log('resize window');
            this.render();
        });
    }
    get nodeParser() {
        if (!this._nodeParser)
            this._nodeParser = new D3NodeBasicParser();
        return this._nodeParser;
    }
    set nodeParser(parser) {
        this._nodeParser = parser;
        // this.render();
    }
    get data() {
        return this._data || [];
    }
    set data(data) {
        this._data = data;
        // this.render()
    }
    render() {
        const me = this;
        // preparing svg
        me.prepareCanvas();
        // if no data then return
        if (!me.data.length)
            return;
        // preparing data
        me.prepareData();
        // showing nodes
        me.showNodes();
        return this;
    }
    // preparing canvas
    prepareCanvas() {
        const me = this;
        //Drawing containers
        const containerRect = me.container.node().getBoundingClientRect();
        // console.log('Container resct: ', containerRect)
        me.svg = me.container.selectAll('svg')
            .data([{ id: 'svg' }], (d) => d.id)
            .join(enter => enter
            .append('svg')
            .attr('class', 'svg-chart-container')
            .attr('font-family', me.options.defaultFont)
            // .call(d3.zoom().on("zoom", d => this.zoomed()))
            .call(this.zoomFunc)
            .on("dblclick.zoom", null)
            .attr('cursor', 'move')
            .style('background-color', me.options.backgroundColor), update => update
            .attr('width', containerRect.width)
            .attr('height', containerRect.height)
            .attr('font-family', me.options.defaultFont)
            .style('background-color', me.options.backgroundColor))
            .attr('width', containerRect.width)
            .attr('height', containerRect.height)
            .attr('font-family', me.options.defaultFont)
            .style('background-color', me.options.backgroundColor);
        //Add container g element
        me.chart = me.svg.selectAll('g.chart')
            .data([{ id: 'chart' }], (d) => d.id)
            .join(enter => enter
            .append('g')
            .attr('class', 'chart')
            .attr('transform', `translate(0,0)`), update => update);
        if (!me.lastTransform)
            me.svg.transition().duration(200).call(me.zoomFunc.transform, d3.zoomIdentity.translate(containerRect.width / 2, this.nodeParser.height).scale(1));
        //Add container g element
        me.tb = me.svg.selectAll('g.toolbar')
            .data([{ id: 'toolbar' }], (d) => d.id)
            .join(enter => enter
            .append('g')
            .attr('class', 'toolbar')
            .attr('transform', `translate(10,10)`)
            .append('rect')
            .attr('width', 30)
            .attr('height', 30)
            .attr('fill', 'url(#img-fit-icon)')
            .attr('cursor', 'pointer')
            .on('click', () => me.fit()), update => update);
        me.prepareDefs();
    }
    // preparing defs
    prepareDefs() {
        const me = this;
        // defs
        me.defs = me.svg.selectAll('defs.globalDefs')
            .data([{ id: 'defs' }], (d) => d.id)
            .join(enter => {
            const defs = enter.append('defs').attr('class', 'globalDefs');
            addDefaultDefs(defs, {
                'expand-icon': {
                    type: 'icon',
                    backgroundColor: '#05C356',
                    scale: 0.6,
                    color: '#EAFA48',
                    name: 'faPlus'
                },
                'collapse-icon': {
                    type: 'icon',
                    backgroundColor: '#D10303',
                    scale: 0.6,
                    color: '#EAFA48',
                    name: 'faMinus'
                },
                'fit-icon': {
                    type: 'icon',
                    backgroundColor: '#074EF3',
                    scale: 0.9,
                    color: '#EAFA48',
                    name: 'faExpand'
                },
                'default-node-img': me.nodeParser.defaultImage
            }, me.nodeParser);
            //addDefs(defs, me.defsElements);
            return defs;
        }, update => update);
    }
    // preparing data
    prepareData() {
        const me = this;
        // if no data return 
        if (!me.data.length)
            return;
        // Convert flat data to hierarchical
        if (!me.root) {
            try { // preventing multiple root
                me.root = d3.stratify().id(({ nodeId }) => nodeId).parentId(({ parentNodeId }) => parentNodeId)(me.data);
            }
            catch (err) {
                me.root = d3.stratify().id(({ nodeId }) => nodeId).parentId(({ parentNodeId }) => parentNodeId)([{
                        nodeId: 'root',
                        parentNodeId: '',
                        title: 'Error',
                        description: err.message || err,
                        nodeImage: {
                            type: 'base64',
                            data: me.nodeParser.errorBase64Icon
                        }
                    }]);
            }
        }
        // preparing treemap
        const containerRect = me.container.node().getBoundingClientRect();
        me.treemap = d3.tree() //.size([containerRect.width || 250, containerRect.height])
            .nodeSize([
            (me.nodeParser.width + (this.nodeParser.width * me.options.nodeHorizontalSpaceScale || 0.5)) * 0,
            (me.nodeParser.height + (this.nodeParser.height * me.options.nodeVerticalSpaceScale || 0.8)) * 0
        ])
            .separation((a, b) => {
            return 1;
        });
        // me.allNodes = me.treemap(me.root).descendants();
        me.checkExpanded(me.root);
    }
    // showing nodes
    showNodes(prNode = null) {
        const me = this;
        if (!prNode)
            prNode = me.root;
        const nodeRef = {
            x: prNode.x || 0,
            y: prNode.y || 0,
            parent: prNode.parent
        };
        // console.log('Node Before: ', nodeRef.x);
        const updatePosition = {
            x: prNode.x || 0,
            y: prNode.y || 0
        };
        //  Assigns the x and y position for the nodes
        const treeData = me.treemap(me.root);
        // it is necesary for scope 
        const drawNodes = (container) => me.nodeParser.drawNodes(container, me.onNodeClick);
        const drawCollapser = (nodeGroup) => {
            nodeGroup.append('circle')
                .attr('class', 'collapser')
                .attr('cx', me.nodeParser.width / 2)
                .attr('cy', me.nodeParser.height)
                .attr('r', 15)
                .attr('stroke', 'black')
                .attr('stroke-width', 2)
                .on('click', (node) => {
                // console.log('Node X: ', node.x)
                d3.event.preventDefault();
                me.expand(node, true);
            });
        };
        // console.log('Node ref: ', prNode.x, nodeRef.x, nodeRef )
        const nodes = treeData.descendants();
        // probanding
        buildTree(me.root, {
            w: me.nodeParser.width + (this.nodeParser.width * me.options.nodeHorizontalSpaceScale || 0.5),
            h: me.nodeParser.height + (this.nodeParser.height * me.options.nodeVerticalSpaceScale || 0.8)
        });
        // console.log('Nodes: ', nodes);
        // preparing all definitions for nodes
        me.defs.selectAll('pattern.node')
            .data(nodes, (d) => d.data.nodeId)
            .join(enter => enter.filter(d => d.data.nodeImage != null)
            .append('pattern').attr('class', 'node')
            .each((nodeData, i, enterNodes) => {
            // adding pattern
            const pattern = d3.select(enterNodes[i]);
            setPattern(pattern, nodeData.data, me.nodeParser);
        }), update => update, exit => exit
            .transition()
            .duration(me.nodeParser.transitionDuration)
            .style("opacity", 0)
            .remove());
        // rendering nodes
        const nodeStartPosition = (d) => {
            if (nodeRef) {
                return `translate(${nodeRef.x - (me.nodeParser.width / 2)},${nodeRef.y})`;
            }
            if (!d.parent)
                return `translate(${d.x - (me.nodeParser.width / 2)},${d.y})`;
            return `translate(${d.parent.x - (me.nodeParser.width / 2)},${d.parent.y})`;
        };
        const collapserStartPosition = (d) => {
            if (nodeRef)
                return nodeRef;
            if (!d.parent)
                return d;
            return d.parent;
        };
        const nodePosition = (params) => `translate(${params.x - (me.nodeParser.width / 2)},${params.y})`;
        const collapserPosition = (params) => `translate(${params.x},${params.y})`;
        const expandIconVisible = (d) => (d.children || d._children) ? 'visible' : 'hidden';
        const expandIcon = (d) => expandIconVisible(d) == 'visible' ? (d.data.expanded ? `url(#img-collapse-icon)` : `url(#img-expand-icon)`) : '';
        const collapserCursor = (d) => expandIconVisible(d) == 'visible' ? (d.data.expanded ? `zoom-out` : `zoom-in`) : 'default';
        me.chart.selectAll('g.node')
            .data(nodes, (d) => d.data.nodeId)
            .join(enter => enter.append('g')
            .style("opacity", 0)
            .attr('class', 'node')
            .attr('cursor', 'pointer')
            .attr('transform', nodeStartPosition)
            .call(drawNodes)
            // .call(drawCollapser)
            .on('dblclick', (node) => {
            const containerRect = me.container.node().getBoundingClientRect();
            me.traslateTo((containerRect.width / 2) - node.x, ((containerRect.height - me.nodeParser.height) / 2) - node.y);
        }), update => update, exit => exit
            .transition()
            .duration(me.nodeParser.transitionDuration)
            .attr('transform', nodePosition(prNode))
            .style("opacity", 0)
            .remove())
            .transition().duration(me.nodeParser.transitionDuration)
            .style("opacity", 1)
            .attr('transform', nodePosition);
        //.selectAll('circle.collapser')
        //.attr('visibility', expandIconVisible)
        //.attr('fill', expandIcon)
        me.chart.selectAll('circle.collapser')
            .data(nodes, (d) => d.data.nodeId)
            .join(enter => enter.append('circle')
            .attr('class', 'collapser')
            .style("opacity", 0)
            .attr('cx', (d) => collapserStartPosition(d).x)
            .attr('cy', (d) => collapserStartPosition(d).y + me.nodeParser.height)
            .attr('r', 15)
            .attr('stroke', 'black')
            .attr('stroke-width', 2)
            .on('click', (node) => {
            // console.log('Node X: ', node.x)
            d3.event.preventDefault();
            me.expand(node, true);
        }), update => update, exit => exit
            .transition().duration(me.nodeParser.transitionDuration)
            .attr('cx', (d) => collapserStartPosition(d).x)
            .attr('cy', (d) => collapserStartPosition(d).y + me.nodeParser.height)
            .style("opacity", 0)
            .remove())
            .transition().duration(me.nodeParser.transitionDuration)
            .style("opacity", 1)
            .attr('cx', (d) => d.x)
            .attr('cy', (d) => d.y + me.nodeParser.height)
            .attr('visibility', expandIconVisible)
            .attr('fill', expandIcon)
            .attr('cursor', collapserCursor);
        // rendering links
        const pathStartingDiagonal = (d) => {
            return this.linkPath(d, d);
        };
        const pathDiagonal = (d) => {
            const target = { x: d.parent.x, y: d.parent.y + me.nodeParser.height };
            return this.linkPath(d, d.parent);
        };
        me.chart.selectAll('path.link')
            .data(nodes.slice(1), (d) => d.data.nodeId)
            .join(enter => enter
            .insert('path', 'g')
            .attr('class', 'link')
            .attr('fill', 'none')
            .attr('stroke', 'blue')
            .attr('stroke-width', 2)
            .attr('d', pathStartingDiagonal(nodeRef)), update => update, exit => exit
            .transition().duration(me.nodeParser.transitionDuration)
            .attr('d', pathStartingDiagonal(prNode))
            .remove())
            .transition().duration(me.nodeParser.transitionDuration)
            .attr('d', pathDiagonal);
    }
    // Zoom handler function
    zoomed() {
        const me = this;
        // Saving d3 event's transform object
        me.lastTransform = d3.event.transform;
        // Reposition and rescale chart accordingly
        if (isNaN(me.lastTransform.k) || isNaN(me.lastTransform.x) || isNaN(me.lastTransform.y))
            return;
        me.chart.attr('transform', d3.event.transform);
    }
    _onNodeClick(nodeId, node) {
        this.onNodeClick.next({ id: nodeId, node: node });
    }
    //#endregion
    // Generate custom diagonal - play with it here - https://observablehq.com/@bumbeishvili/curved-edges?collection=@bumbeishvili/work-components
    linkPath(source, target) {
        const me = this;
        // Calculate some variables based on source and target (s,t) coordinates
        let x = source.x;
        let y = source.y;
        const ex = target.x;
        const ey = target.y + me.nodeParser.height;
        const linkHeight = 25;
        const curveRadius = Math.abs(x - ex) != 0 ? 15 : 0;
        let xrvs = ex - x < 0 ? -1 : 1;
        let yrvs = ey - y < 0 ? -1 : 1;
        let w = Math.abs(ex - x) - (curveRadius * 2);
        const path = `
      M ${x} ${y}
      L ${x} ${y + (linkHeight * yrvs)}
      C ${x} ${y + ((linkHeight + curveRadius) * yrvs)} ${x} ${y + ((linkHeight + curveRadius) * yrvs)} ${x + (curveRadius * xrvs)} ${y + ((linkHeight + curveRadius) * yrvs)}
      L ${x + ((w + curveRadius) * xrvs)} ${y + ((linkHeight + curveRadius) * yrvs)}
      C ${ex}  ${y + ((linkHeight + curveRadius) * yrvs)} ${ex}  ${y + ((linkHeight + curveRadius) * yrvs)} ${ex} ${y + ((linkHeight + curveRadius) * yrvs) + (curveRadius * yrvs)}
      L ${ex} ${ey}
    `;
        return path;
    }
    checkExpanded(node) {
        const me = this;
        // checking expanded
        if (node.data.expanded) {
            if (!node.children && node._children) {
                node.children = node._children;
                node._children = null;
            }
        }
        else { // collapsed
            if (node.children) {
                node._children = node.children;
                node.children = null;
            }
        }
        // checking children
        (node.children || node._children || []).forEach(current => me.checkExpanded(current));
    }
    expand(node, toggle = false) {
        const me = this;
        const nodeRef = Object.assign(node);
        // if toggle - lets toggle
        if (toggle)
            node.data.expanded = !node.data.expanded;
        // checking expanded
        if (node.data.expanded) {
            if (!node.children && node._children) {
                node.children = node._children;
                node._children = null;
            }
        }
        else { // collapsed
            if (node.children) {
                node._children = node.children;
                node.children = null;
            }
        }
        // expand(node.children, node.data.expanded);
        // console.log('Before expand: ', nodeRef.x,  node.x)
        if (toggle)
            me.showNodes(node);
    }
    traslateTo(prX, prY) {
        const me = this;
        me.svg
            .transition().duration(me.nodeParser.transitionDuration)
            .call(me.zoomFunc.transform, d3.zoomIdentity.translate(prX, prY));
    }
    fit() {
        const me = this;
        // const zoom = d3.zoom().on("zoom", d => this.zoomed())
        if (!me.root)
            return;
        const fit = calcGFit(me.chart, me.svg, me.root, me.nodeParser);
        me.svg.transition().duration(me.nodeParser.transitionDuration).call(me.zoomFunc.transform, d3.zoomIdentity.translate(fit.x, fit.y).scale(fit.scale));
    }
    setOptions(prOptions) {
        const me = this;
        me.options = Object.assign(me.options, prOptions);
    }
}
//# sourceMappingURL=data:application/json;base64,