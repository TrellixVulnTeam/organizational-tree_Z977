import { Injectable, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { Subject } from 'rxjs';
import { trigger, state, style, transition, animate } from '@angular/animations';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = function (a0, a1) { return { "transform": a0, "cursor": a1 }; };
function ChartNodeComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
const _c1 = function (a0, a1) { return { "oc-icon-plus": a0, "oc-icon-minus": a1 }; };
function ChartNodeComponent_i_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 5);
    ɵngcc0.ɵɵlistener("click", function ChartNodeComponent_i_2_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.toggleChildren(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(1, _c1, ctx_r1.isCollapsed, !ctx_r1.isCollapsed));
} }
function ChartNodeComponent_div_3_ng_container_1_div_1_ng_container_1_orgchart_node_1_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "orgchart-node", 11);
    ɵngcc0.ɵɵlistener("nodeClick", function ChartNodeComponent_div_3_ng_container_1_div_1_ng_container_1_orgchart_node_1_Template_orgchart_node_nodeClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(5); return ctx_r15.onNodeClick($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const j_r13 = ɵngcc0.ɵɵnextContext().index;
    const i_r9 = ɵngcc0.ɵɵnextContext(2).index;
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("datasource", ctx_r14.datasource.children[i_r9 + j_r13])("nodeHeading", ctx_r14.nodeHeading)("nodeContent", ctx_r14.nodeContent)("nodeTemplate", ctx_r14.nodeTemplate)("groupScale", ctx_r14.groupScale)("select", ctx_r14.select);
} }
function ChartNodeComponent_div_3_ng_container_1_div_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ChartNodeComponent_div_3_ng_container_1_div_1_ng_container_1_orgchart_node_1_Template, 1, 6, "orgchart-node", 10);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const j_r13 = ctx.index;
    const i_r9 = ɵngcc0.ɵɵnextContext(2).index;
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", i_r9 + j_r13 < ctx_r11.datasource.children.length);
} }
function ChartNodeComponent_div_3_ng_container_1_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtemplate(1, ChartNodeComponent_div_3_ng_container_1_div_1_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r10.Arr(ctx_r10.groupScale));
} }
function ChartNodeComponent_div_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, ChartNodeComponent_div_3_ng_container_1_div_1_Template, 2, 1, "div", 8);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const i_r9 = ctx.index;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", i_r9 % ctx_r7.groupScale === 0);
} }
function ChartNodeComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵlistener("@expandCollapse.start", function ChartNodeComponent_div_3_Template_div_animation_expandCollapse_start_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.toggleAnimStart($event); })("@expandCollapse.done", function ChartNodeComponent_div_3_Template_div_animation_expandCollapse_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.toggleAnimEnd($event); });
    ɵngcc0.ɵɵtemplate(1, ChartNodeComponent_div_3_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@expandCollapse", ctx_r2.isCollapsed ? "collapsed" : "expanded")("ngStyle", ctx_r2.ecStyles);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.datasource.children);
} }
function ChartNodeComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "div", 13);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const nodeData_r23 = ctx.datasource;
    const heading_r24 = ctx.nodeHeading;
    const content_r25 = ctx.nodeContent;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(nodeData_r23[heading_r24]);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(nodeData_r23[content_r25]);
} }
const _c2 = function (a0, a1, a2) { return { datasource: a0, nodeHeading: a1, nodeContent: a2 }; };
class NodeSelectService {
    constructor() {
        this.subject = new Subject();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    sendSelect(id) {
        this.subject.next({ id });
    }
    /**
     * @return {?}
     */
    clearSelect() {
        this.subject.next();
    }
    /**
     * @return {?}
     */
    getSelect() {
        return this.subject.asObservable();
    }
}
NodeSelectService.ɵfac = function NodeSelectService_Factory(t) { return new (t || NodeSelectService)(); };
NodeSelectService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NodeSelectService, factory: NodeSelectService.ɵfac });
/** @nocollapse */
NodeSelectService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NodeSelectService, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    NodeSelectService.prototype.subject;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChartContainerComponent {
    /**
     * @param {?} nodeSelectService
     */
    constructor(nodeSelectService) {
        this.nodeSelectService = nodeSelectService;
        this.nodeHeading = 'name';
        this.nodeContent = 'title';
        this.groupScale = 3;
        this.pan = false;
        this.zoom = false;
        this.zoomoutLimit = 0.5;
        this.zoominLimit = 7;
        this.containerClass = '';
        this.chartClass = '';
        this.select = 'single';
        this.nodeClick = new EventEmitter();
        this.chartClick = new EventEmitter();
        this.cursorVal = 'default';
        this.panning = false;
        this.startX = 0;
        this.startY = 0;
        this.transformVal = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    panEndHandler() {
        this.panning = false;
        this.cursorVal = 'default';
    }
    /**
     * @param {?} e
     * @return {?}
     */
    panHandler(e) {
        /** @type {?} */
        let newX = 0;
        /** @type {?} */
        let newY = 0;
        if (!e.targetTouches) {
            // pand on desktop
            newX = e.pageX - this.startX;
            newY = e.pageY - this.startY;
        }
        else if (e.targetTouches.length === 1) {
            // pan on mobile device
            newX = e.targetTouches[0].pageX - this.startX;
            newY = e.targetTouches[0].pageY - this.startY;
        }
        else if (e.targetTouches.length > 1) {
            return;
        }
        if (this.transformVal === '') {
            if (this.transformVal.indexOf('3d') === -1) {
                this.transformVal = 'matrix(1,0,0,1,' + newX + ',' + newY + ')';
            }
            else {
                this.transformVal =
                    'matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,' + newX + ', ' + newY + ',0,1)';
            }
        }
        else {
            /** @type {?} */
            const matrix = this.transformVal.split(',');
            if (this.transformVal.indexOf('3d') === -1) {
                matrix[4] = newX.toString();
                matrix[5] = newY + ')';
            }
            else {
                matrix[12] = newX.toString();
                matrix[13] = newY.toString();
            }
            this.transformVal = matrix.join(',');
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    panStartHandler(e) {
        if (e.target.querySelectorAll('.node') && e.target.querySelectorAll('.node').length) {
            this.panning = false;
            return;
        }
        else {
            this.cursorVal = 'move';
            this.panning = true;
        }
        /** @type {?} */
        let lastX = 0;
        /** @type {?} */
        let lastY = 0;
        if (this.transformVal !== '') {
            /** @type {?} */
            const matrix = this.transformVal.split(',');
            if (this.transformVal.indexOf('3d') === -1) {
                lastX = parseInt(matrix[4], 10);
                lastY = parseInt(matrix[5], 10);
            }
            else {
                lastX = parseInt(matrix[12], 10);
                lastY = parseInt(matrix[13], 10);
            }
        }
        if (!e.targetTouches) {
            // pand on desktop
            this.startX = e.pageX - lastX;
            this.startY = e.pageY - lastY;
        }
        else if (e.targetTouches.length === 1) {
            // pan on mobile device
            this.startX = e.targetTouches[0].pageX - lastX;
            this.startY = e.targetTouches[0].pageY - lastY;
        }
        else if (e.targetTouches.length > 1) {
            return;
        }
    }
    /**
     * @param {?} newScale
     * @return {?}
     */
    setChartScale(newScale) {
        /** @type {?} */
        let matrix = [];
        /** @type {?} */
        let targetScale = 1;
        if (this.transformVal === '') {
            this.transformVal =
                'matrix(' + newScale + ', 0, 0, ' + newScale + ', 0, 0)';
        }
        else {
            matrix = this.transformVal.split(',');
            if (this.transformVal.indexOf('3d') === -1) {
                targetScale = Math.abs(parseFloat(matrix[3]) * newScale);
                if (targetScale > this.zoomoutLimit && targetScale < this.zoominLimit) {
                    matrix[0] = 'matrix(' + targetScale;
                    matrix[3] = targetScale;
                    this.transformVal = matrix.join(',');
                }
            }
            else {
                targetScale = Math.abs(parseFloat(matrix[5]) * newScale);
                if (targetScale > this.zoomoutLimit && targetScale < this.zoominLimit) {
                    matrix[0] = 'matrix3d(' + targetScale;
                    matrix[5] = targetScale;
                    this.transformVal = matrix.join(',');
                }
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    zoomHandler(e) {
        /** @type {?} */
        const newScale = 1 + (e.deltaY > 0 ? -0.2 : 0.2);
        this.setChartScale(newScale);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClickChart(e) {
        if (!e.target.closest('.oc-node')) {
            this.chartClick.emit();
            this.nodeSelectService.clearSelect();
        }
    }
    /**
     * @param {?} nodeData
     * @return {?}
     */
    onNodeClick(nodeData) {
        this.nodeClick.emit(nodeData);
    }
}
ChartContainerComponent.ɵfac = function ChartContainerComponent_Factory(t) { return new (t || ChartContainerComponent)(ɵngcc0.ɵɵdirectiveInject(NodeSelectService)); };
ChartContainerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ChartContainerComponent, selectors: [["organization-chart"]], inputs: { nodeHeading: "nodeHeading", nodeContent: "nodeContent", groupScale: "groupScale", pan: "pan", zoom: "zoom", zoomoutLimit: "zoomoutLimit", zoominLimit: "zoominLimit", containerClass: "containerClass", chartClass: "chartClass", select: "select", datasource: "datasource", nodeTemplate: "nodeTemplate" }, outputs: { nodeClick: "nodeClick", chartClick: "chartClick" }, decls: 3, vars: 12, consts: [[1, "orgchart-container", 3, "ngClass", "wheel", "mouseup"], [1, "orgchart", 3, "ngClass", "ngStyle", "mousedown", "mousemove", "click"], [3, "datasource", "nodeHeading", "nodeContent", "nodeTemplate", "groupScale", "select", "nodeClick"]], template: function ChartContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("wheel", function ChartContainerComponent_Template_div_wheel_0_listener($event) { return ctx.zoom ? ctx.zoomHandler($event) : true; })("mouseup", function ChartContainerComponent_Template_div_mouseup_0_listener() { return ctx.pan && ctx.panning ? ctx.panEndHandler() : true; });
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵlistener("mousedown", function ChartContainerComponent_Template_div_mousedown_1_listener($event) { return ctx.pan ? ctx.panStartHandler($event) : true; })("mousemove", function ChartContainerComponent_Template_div_mousemove_1_listener($event) { return ctx.pan && ctx.panning ? ctx.panHandler($event) : true; })("click", function ChartContainerComponent_Template_div_click_1_listener($event) { return ctx.onClickChart($event); });
        ɵngcc0.ɵɵelementStart(2, "orgchart-node", 2);
        ɵngcc0.ɵɵlistener("nodeClick", function ChartContainerComponent_Template_orgchart_node_nodeClick_2_listener($event) { return ctx.onNodeClick($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.containerClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.chartClass)("ngStyle", ɵngcc0.ɵɵpureFunction2(9, _c0, ctx.transformVal, ctx.cursorVal));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("datasource", ctx.datasource)("nodeHeading", ctx.nodeHeading)("nodeContent", ctx.nodeContent)("nodeTemplate", ctx.nodeTemplate)("groupScale", ctx.groupScale)("select", ctx.select);
    } }, directives: function () { return [ɵngcc1.NgClass, ɵngcc1.NgStyle, ChartNodeComponent]; }, styles: [".orgchart-container[_ngcontent-%COMP%]{box-sizing:border-box;position:relative;margin:10px;height:700px;border:2px dashed #aaa;border-radius:5px;overflow:auto;text-align:center}.orgchart[_ngcontent-%COMP%]{box-sizing:border-box;display:inline-block;background-image:linear-gradient(90deg,rgba(200,0,0,.15) 10%,rgba(0,0,0,0) 10%),linear-gradient(rgba(200,0,0,.15) 10%,rgba(0,0,0,0) 10%);background-size:10px 10px;border:1px dashed transparent;padding:20px}"] });
/** @nocollapse */
ChartContainerComponent.ctorParameters = () => [
    { type: NodeSelectService }
];
ChartContainerComponent.propDecorators = {
    datasource: [{ type: Input }],
    nodeHeading: [{ type: Input }],
    nodeContent: [{ type: Input }],
    nodeTemplate: [{ type: Input }],
    groupScale: [{ type: Input }],
    pan: [{ type: Input }],
    zoom: [{ type: Input }],
    zoomoutLimit: [{ type: Input }],
    zoominLimit: [{ type: Input }],
    containerClass: [{ type: Input }],
    chartClass: [{ type: Input }],
    select: [{ type: Input }],
    nodeClick: [{ type: Output }],
    chartClick: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChartContainerComponent, [{
        type: Component,
        args: [{
                selector: 'organization-chart',
                template: "<div class=\"orgchart-container\" [ngClass]=\"containerClass\" (wheel)=\"zoom ? zoomHandler($event) : true\"\n\t(mouseup)=\"pan && panning ? panEndHandler() : true\">\n\t<div class=\"orgchart\" [ngClass]=\"chartClass\" [ngStyle]=\"{'transform': transformVal, 'cursor': cursorVal}\"\n\t\t(mousedown)=\"pan ? panStartHandler($event) : true\" (mousemove)=\"pan && panning ? panHandler($event) : true\"\n\t\t(click)=\"onClickChart($event)\">\n\t\t<orgchart-node [datasource]=\"datasource\" [nodeHeading]=\"nodeHeading\" [nodeContent]=\"nodeContent\"\n\t\t\t[nodeTemplate]=\"nodeTemplate\" [groupScale]=\"groupScale\" [select]=\"select\" (nodeClick)=\"onNodeClick($event)\"></orgchart-node>\n\t</div>\n</div>",
                styles: [".orgchart-container{box-sizing:border-box;position:relative;margin:10px;height:700px;border:2px dashed #aaa;border-radius:5px;overflow:auto;text-align:center}.orgchart{box-sizing:border-box;display:inline-block;background-image:linear-gradient(90deg,rgba(200,0,0,.15) 10%,rgba(0,0,0,0) 10%),linear-gradient(rgba(200,0,0,.15) 10%,rgba(0,0,0,0) 10%);background-size:10px 10px;border:1px dashed transparent;padding:20px}"]
            }]
    }], function () { return [{ type: NodeSelectService }]; }, { nodeHeading: [{
            type: Input
        }], nodeContent: [{
            type: Input
        }], groupScale: [{
            type: Input
        }], pan: [{
            type: Input
        }], zoom: [{
            type: Input
        }], zoomoutLimit: [{
            type: Input
        }], zoominLimit: [{
            type: Input
        }], containerClass: [{
            type: Input
        }], chartClass: [{
            type: Input
        }], select: [{
            type: Input
        }], nodeClick: [{
            type: Output
        }], chartClick: [{
            type: Output
        }], datasource: [{
            type: Input
        }], nodeTemplate: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    ChartContainerComponent.prototype.datasource;
    /** @type {?} */
    ChartContainerComponent.prototype.nodeHeading;
    /** @type {?} */
    ChartContainerComponent.prototype.nodeContent;
    /** @type {?} */
    ChartContainerComponent.prototype.nodeTemplate;
    /** @type {?} */
    ChartContainerComponent.prototype.groupScale;
    /** @type {?} */
    ChartContainerComponent.prototype.pan;
    /** @type {?} */
    ChartContainerComponent.prototype.zoom;
    /** @type {?} */
    ChartContainerComponent.prototype.zoomoutLimit;
    /** @type {?} */
    ChartContainerComponent.prototype.zoominLimit;
    /** @type {?} */
    ChartContainerComponent.prototype.containerClass;
    /** @type {?} */
    ChartContainerComponent.prototype.chartClass;
    /** @type {?} */
    ChartContainerComponent.prototype.select;
    /** @type {?} */
    ChartContainerComponent.prototype.nodeClick;
    /** @type {?} */
    ChartContainerComponent.prototype.chartClick;
    /** @type {?} */
    ChartContainerComponent.prototype.cursorVal;
    /** @type {?} */
    ChartContainerComponent.prototype.panning;
    /** @type {?} */
    ChartContainerComponent.prototype.startX;
    /** @type {?} */
    ChartContainerComponent.prototype.startY;
    /** @type {?} */
    ChartContainerComponent.prototype.transformVal;
    /**
     * @type {?}
     * @private
     */
    ChartContainerComponent.prototype.nodeSelectService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Node {
}
if (false) {
    /** @type {?} */
    Node.prototype.id;
    /** @type {?} */
    Node.prototype.name;
    /** @type {?} */
    Node.prototype.title;
    /** @type {?} */
    Node.prototype.children;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChartNodeComponent {
    /**
     * @param {?} nodeSelectService
     */
    constructor(nodeSelectService) {
        this.nodeSelectService = nodeSelectService;
        this.nodeClick = new EventEmitter();
        this.Arr = Array; // Array type captured in a variable
        // Array type captured in a variable
        this.isCollapsed = false;
        // subscribe to node selection status
        this.subscription = this.nodeSelectService.getSelect().subscribe((/**
         * @param {?} selection
         * @return {?}
         */
        selection => {
            if (selection && selection.id) {
                this.isSelected = this.datasource.id === selection.id;
            }
            else { // clear selection when empty selection received
                this.isSelected = false;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // unsubscribe to ensure no memory leaks
        this.subscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    toggleChildren() {
        this.isCollapsed = !this.isCollapsed;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggleAnimStart(event) {
        if (this.isCollapsed) {
            // 如果折叠的是根结点的子节点，那么根结点向下的连接线需要隐藏
            if (event.element.parentElement &&
                event.element.parentElement.parentElement &&
                event.element.parentElement.parentElement.classList.contains('orgchart')) {
                event.element.previousElementSibling.classList.add('oc-is-collapsed');
            }
        }
        else { // 刚一展开的时候，需要马上把子节点们显示出来，以便看到“下滑”效果
            this.ecStyles = {
                display: 'flex'
            };
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggleAnimEnd(event) {
        if (this.isCollapsed) { // 折叠时，“上滑”动画结束后，需要将子节点们隐藏，以便其不占用空间
            this.ecStyles = {
                display: 'none'
            };
        }
        else {
            // 如果展开的是根结点的子节点，那么根结点向下的连接线需要显示
            if (event.element.parentElement &&
                event.element.parentElement.parentElement &&
                event.element.parentElement.parentElement.classList.contains('orgchart')) {
                event.element.previousElementSibling.classList.remove('oc-is-collapsed');
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClickNode(e) {
        this.nodeClick.emit(this.datasource);
        if (this.select === 'single') {
            this.nodeSelectService.sendSelect(this.datasource.id);
        }
        else if (this.select === 'multiple') {
            this.isSelected = !this.isSelected;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onNodeClick(e) {
        this.nodeClick.emit(e);
    }
}
ChartNodeComponent.ɵfac = function ChartNodeComponent_Factory(t) { return new (t || ChartNodeComponent)(ɵngcc0.ɵɵdirectiveInject(NodeSelectService)); };
ChartNodeComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ChartNodeComponent, selectors: [["orgchart-node"]], inputs: { datasource: "datasource", nodeHeading: "nodeHeading", nodeContent: "nodeContent", nodeTemplate: "nodeTemplate", groupScale: "groupScale", select: "select" }, outputs: { nodeClick: "nodeClick" }, decls: 6, vars: 11, consts: [[1, "oc-node", 3, "id", "click"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "oc-toggle-btn oc-icon", 3, "ngClass", "click", 4, "ngIf"], ["class", "oc-groups", 3, "ngStyle", 4, "ngIf"], ["defaultNodeTemplate", ""], [1, "oc-toggle-btn", "oc-icon", 3, "ngClass", "click"], [1, "oc-groups", 3, "ngStyle"], [4, "ngFor", "ngForOf"], ["class", "oc-group", 4, "ngIf"], [1, "oc-group"], [3, "datasource", "nodeHeading", "nodeContent", "nodeTemplate", "groupScale", "select", "nodeClick", 4, "ngIf"], [3, "datasource", "nodeHeading", "nodeContent", "nodeTemplate", "groupScale", "select", "nodeClick"], [1, "oc-node-heading"], [1, "oc-node-content"]], template: function ChartNodeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("click", function ChartNodeComponent_Template_div_click_0_listener($event) { return ctx.onClickNode($event); });
        ɵngcc0.ɵɵtemplate(1, ChartNodeComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, ChartNodeComponent_i_2_Template, 1, 4, "i", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ChartNodeComponent_div_3_Template, 2, 3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, ChartNodeComponent_ng_template_4_Template, 4, 2, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r3 = ɵngcc0.ɵɵreference(5);
        ɵngcc0.ɵɵclassProp("oc-is-selected", ctx.isSelected);
        ɵngcc0.ɵɵproperty("id", "oc-" + ctx.datasource.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.nodeTemplate ? ctx.nodeTemplate : _r3)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(7, _c2, ctx.datasource, ctx.nodeHeading, ctx.nodeContent));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.datasource.children);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.datasource.children);
    } }, directives: [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgIf, ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ChartNodeComponent], styles: [".oc-groups[_ngcontent-%COMP%]{display:flex;flex-direction:row}.orgchart > [_nghost-%COMP%]{align-items:center}.orgchart > [_nghost-%COMP%] > .oc-node[_ngcontent-%COMP%]::after{content:\"\";box-sizing:border-box;bottom:-10px;left:50%;height:10px;width:2px;position:absolute;background-color:rgba(217,83,79,.8)}.orgchart > [_nghost-%COMP%] > .oc-node.oc-is-collapsed[_ngcontent-%COMP%]::after{display:none}.orgchart > [_nghost-%COMP%] > .oc-groups[_ngcontent-%COMP%] > .oc-group[_ngcontent-%COMP%] > [_ngcontent-%COMP%]::before{height:35px;top:-10px}.oc-node[_ngcontent-%COMP%]{width:140px;font-family:Arial;box-sizing:border-box;position:relative;padding:3px;margin:0;border:2px solid transparent;text-align:center}.oc-node.oc-is-selected[_ngcontent-%COMP%], .oc-node[_ngcontent-%COMP%]:hover{background-color:rgba(238,217,54,.5)}.oc-node[_ngcontent-%COMP%]   .oc-node-heading[_ngcontent-%COMP%]{box-sizing:border-box;padding:2px;margin:0;width:130px;height:20px;text-align:center;font-size:.75rem;font-weight:700;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background-color:rgba(217,83,79,.8);color:#fff;border-radius:4px 4px 0 0}.oc-node[_ngcontent-%COMP%]   .oc-node-content[_ngcontent-%COMP%]{box-sizing:border-box;padding:2px;width:130px;height:20px;font-size:.625rem;border:1px solid rgba(217,83,79,.8);border-radius:0 0 4px 4px;text-align:center;background-color:#fff;color:#333;text-overflow:ellipsis;white-space:nowrap}.oc-node[_ngcontent-%COMP%]   .oc-toggle-btn[_ngcontent-%COMP%]{color:#fff;background-color:rgba(68,157,68,.6);position:absolute;left:5px;bottom:5px}.oc-group[_ngcontent-%COMP%]{display:flex;flex-direction:column;padding-left:20px;position:relative;padding-top:20px}.orgchart > [_nghost-%COMP%] > .oc-groups[_ngcontent-%COMP%] > .oc-group[_ngcontent-%COMP%]:first-child{padding-left:10px}.oc-group[_ngcontent-%COMP%]:not(:last-child)::before{content:\"\";box-sizing:border-box;top:10px;left:12px;width:calc(100% - 2px);position:absolute;border-color:rgba(217,83,79,.8);border-style:solid;border-width:0 0 2px}.orgchart > [_nghost-%COMP%] > .oc-groups[_ngcontent-%COMP%] > .oc-group[_ngcontent-%COMP%]:first-child::before{width:calc(100% + 8px);left:2px}[_nghost-%COMP%]{position:relative;display:flex;flex-direction:column}[_nghost-%COMP%]:not(:last-child){padding-bottom:10px}.oc-group > [_nghost-%COMP%]::before{content:\"\";box-sizing:border-box;height:35px;width:10px;position:absolute;left:-10px;top:-10px;border-color:rgba(217,83,79,.8);border-style:solid;border-width:0 0 2px 2px}.oc-group:first-child > [_nghost-%COMP%]:first-child::before{height:45px;top:-20px}[_nghost-%COMP%]:not(:last-child)::after{content:\"\";box-sizing:border-box;height:calc(100% - 35px);width:10px;position:absolute;left:-10px;top:25px;border-color:rgba(217,83,79,.8);border-style:solid;border-width:0 0 0 2px}.oc-icon[_ngcontent-%COMP%]{display:inline-block;width:1rem;height:1rem;line-height:1rem;text-align:center}.oc-icon-minus[_ngcontent-%COMP%]::before{content:\"\\2212\"}.oc-icon-plus[_ngcontent-%COMP%]::before{content:\"\\002B\"}"], data: { animation: [
            trigger('expandCollapse', [
                state('expanded', style({
                    transform: 'translateY(0)',
                    opacity: 1
                })),
                state('collapsed', style({
                    transform: 'translateY(-50px)',
                    opacity: 0
                })),
                transition('expanded => collapsed', [animate('0.2s')]),
                transition('collapsed => expanded', [animate('0.2s')])
            ])
        ] } });
/** @nocollapse */
ChartNodeComponent.ctorParameters = () => [
    { type: NodeSelectService }
];
ChartNodeComponent.propDecorators = {
    datasource: [{ type: Input }],
    nodeHeading: [{ type: Input }],
    nodeContent: [{ type: Input }],
    nodeTemplate: [{ type: Input }],
    groupScale: [{ type: Input }],
    select: [{ type: Input }],
    nodeClick: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChartNodeComponent, [{
        type: Component,
        args: [{
                selector: 'orgchart-node',
                template: "<div class=\"oc-node\" [id]=\"'oc-' + datasource.id\" [class.oc-is-selected]=\"isSelected\" (click)=\"onClickNode($event)\">\n\t<ng-container\n\t\t*ngTemplateOutlet=\"nodeTemplate ? nodeTemplate : defaultNodeTemplate; context:{ datasource:datasource,nodeHeading: nodeHeading, nodeContent: nodeContent }\">\n\t</ng-container>\n\t<i *ngIf=\"datasource.children\" [ngClass]=\"{'oc-icon-plus': isCollapsed, 'oc-icon-minus': !isCollapsed}\" (click)=\"toggleChildren()\" class=\"oc-toggle-btn oc-icon\"></i>\n</div>\n<div *ngIf=\"datasource.children\" [@expandCollapse]=\"isCollapsed ? 'collapsed' : 'expanded'\"\n\t(@expandCollapse.start)=\"toggleAnimStart($event)\" (@expandCollapse.done)=\"toggleAnimEnd($event)\"\n\t[ngStyle]=\"ecStyles\" class=\"oc-groups\">\n\t<ng-container *ngFor=\"let node of datasource.children;let i=index\">\n\t\t<div *ngIf=\"i % groupScale === 0\" class=\"oc-group\">\n\t\t\t<ng-container *ngFor=\"let temp of Arr(groupScale);let j=index;\">\n\t\t\t\t<orgchart-node *ngIf=\"i + j < datasource.children.length\" [datasource]=\"datasource.children[i + j]\"\n\t\t\t\t\t[nodeHeading]=\"nodeHeading\" [nodeContent]=\"nodeContent\" [nodeTemplate]=\"nodeTemplate\"\n\t\t\t\t\t[groupScale]=\"groupScale\" [select]=\"select\" (nodeClick)=\"onNodeClick($event)\">\n\t\t\t\t</orgchart-node>\n\t\t\t</ng-container>\n\t\t</div>\n\t</ng-container>\n</div>\n\n<ng-template #defaultNodeTemplate let-nodeData=\"datasource\" let-heading=\"nodeHeading\" let-content=\"nodeContent\">\n\t<div class=\"oc-node-heading\">{{nodeData[heading]}}</div>\n\t<div class=\"oc-node-content\">{{nodeData[content]}}</div>\n</ng-template>",
                animations: [
                    trigger('expandCollapse', [
                        state('expanded', style({
                            transform: 'translateY(0)',
                            opacity: 1
                        })),
                        state('collapsed', style({
                            transform: 'translateY(-50px)',
                            opacity: 0
                        })),
                        transition('expanded => collapsed', [animate('0.2s')]),
                        transition('collapsed => expanded', [animate('0.2s')])
                    ])
                ],
                styles: [".oc-groups{display:flex;flex-direction:row}.orgchart>:host{align-items:center}.orgchart>:host>.oc-node::after{content:\"\";box-sizing:border-box;bottom:-10px;left:50%;height:10px;width:2px;position:absolute;background-color:rgba(217,83,79,.8)}.orgchart>:host>.oc-node.oc-is-collapsed::after{display:none}.orgchart>:host>.oc-groups>.oc-group>:host::before{height:35px;top:-10px}.oc-node{width:140px;font-family:Arial;box-sizing:border-box;position:relative;padding:3px;margin:0;border:2px solid transparent;text-align:center}.oc-node.oc-is-selected,.oc-node:hover{background-color:rgba(238,217,54,.5)}.oc-node .oc-node-heading{box-sizing:border-box;padding:2px;margin:0;width:130px;height:20px;text-align:center;font-size:.75rem;font-weight:700;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background-color:rgba(217,83,79,.8);color:#fff;border-radius:4px 4px 0 0}.oc-node .oc-node-content{box-sizing:border-box;padding:2px;width:130px;height:20px;font-size:.625rem;border:1px solid rgba(217,83,79,.8);border-radius:0 0 4px 4px;text-align:center;background-color:#fff;color:#333;text-overflow:ellipsis;white-space:nowrap}.oc-node .oc-toggle-btn{color:#fff;background-color:rgba(68,157,68,.6);position:absolute;left:5px;bottom:5px}.oc-group{display:flex;flex-direction:column;padding-left:20px;position:relative;padding-top:20px}.orgchart>:host>.oc-groups>.oc-group:first-child{padding-left:10px}.oc-group:not(:last-child)::before{content:\"\";box-sizing:border-box;top:10px;left:12px;width:calc(100% - 2px);position:absolute;border-color:rgba(217,83,79,.8);border-style:solid;border-width:0 0 2px}.orgchart>:host>.oc-groups>.oc-group:first-child::before{width:calc(100% + 8px);left:2px}:host{position:relative;display:flex;flex-direction:column}:host:not(:last-child){padding-bottom:10px}.oc-group>:host::before{content:\"\";box-sizing:border-box;height:35px;width:10px;position:absolute;left:-10px;top:-10px;border-color:rgba(217,83,79,.8);border-style:solid;border-width:0 0 2px 2px}.oc-group:first-child>:host:first-child::before{height:45px;top:-20px}:host:not(:last-child)::after{content:\"\";box-sizing:border-box;height:calc(100% - 35px);width:10px;position:absolute;left:-10px;top:25px;border-color:rgba(217,83,79,.8);border-style:solid;border-width:0 0 0 2px}.oc-icon{display:inline-block;width:1rem;height:1rem;line-height:1rem;text-align:center}.oc-icon-minus::before{content:\"\\2212\"}.oc-icon-plus::before{content:\"\\002B\"}"]
            }]
    }], function () { return [{ type: NodeSelectService }]; }, { nodeClick: [{
            type: Output
        }], datasource: [{
            type: Input
        }], nodeHeading: [{
            type: Input
        }], nodeContent: [{
            type: Input
        }], nodeTemplate: [{
            type: Input
        }], groupScale: [{
            type: Input
        }], select: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    ChartNodeComponent.prototype.datasource;
    /** @type {?} */
    ChartNodeComponent.prototype.nodeHeading;
    /** @type {?} */
    ChartNodeComponent.prototype.nodeContent;
    /** @type {?} */
    ChartNodeComponent.prototype.nodeTemplate;
    /** @type {?} */
    ChartNodeComponent.prototype.groupScale;
    /** @type {?} */
    ChartNodeComponent.prototype.select;
    /** @type {?} */
    ChartNodeComponent.prototype.nodeClick;
    /** @type {?} */
    ChartNodeComponent.prototype.Arr;
    /** @type {?} */
    ChartNodeComponent.prototype.isCollapsed;
    /** @type {?} */
    ChartNodeComponent.prototype.ecStyles;
    /** @type {?} */
    ChartNodeComponent.prototype.isSelected;
    /** @type {?} */
    ChartNodeComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ChartNodeComponent.prototype.nodeSelectService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OrgchartModule {
}
OrgchartModule.ɵfac = function OrgchartModule_Factory(t) { return new (t || OrgchartModule)(); };
OrgchartModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: OrgchartModule });
OrgchartModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [NodeSelectService], imports: [[
            CommonModule,
            BrowserAnimationsModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OrgchartModule, [{
        type: NgModule,
        args: [{
                declarations: [ChartContainerComponent, ChartNodeComponent],
                imports: [
                    CommonModule,
                    BrowserAnimationsModule
                ],
                exports: [ChartContainerComponent, ChartNodeComponent],
                providers: [NodeSelectService]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OrgchartModule, { declarations: function () { return [ChartContainerComponent, ChartNodeComponent]; }, imports: function () { return [CommonModule,
        BrowserAnimationsModule]; }, exports: function () { return [ChartContainerComponent, ChartNodeComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { OrgchartModule, ChartContainerComponent as ɵa, NodeSelectService as ɵb, ChartNodeComponent as ɵc };

//# sourceMappingURL=dabeng-ng-orgchart.js.map